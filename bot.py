import os
import sqlite3
import telebot
from telebot import types
import time
import random
import string

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = 6540509823  # –í–ê–® –†–ï–ê–õ–¨–ù–´–ô ID

bot = telebot.TeleBot(BOT_TOKEN)

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –¥–ª—è —Å–¥–µ–ª–æ–∫
def generate_trade_id():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
def init_db():
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS trades (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                trade_unique_id TEXT UNIQUE,
                seller_id INTEGER,
                seller_username TEXT,
                buyer_id INTEGER,
                buyer_username TEXT,
                nft_url TEXT,
                description TEXT,
                price REAL,
                currency TEXT,
                status TEXT DEFAULT 'waiting_payment',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–∞–ª–∞–Ω—Å—ã)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                balance_rub REAL DEFAULT 0,
                balance_usd REAL DEFAULT 0,
                balance_byn REAL DEFAULT 0,
                balance_kzt REAL DEFAULT 0,
                balance_uah REAL DEFAULT 0,
                stars INTEGER DEFAULT 0,
                card_number TEXT,
                is_admin BOOLEAN DEFAULT FALSE
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                trade_id INTEGER,
                user_id INTEGER,
                amount REAL,
                currency TEXT,
                status TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id, username, is_admin)
            VALUES (?, 'admin', TRUE)
        ''', (ADMIN_ID,))
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_data = {}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã
CURRENCIES = {
    'stars': '‚≠ê –ó–≤–µ–∑–¥—ã',
    'rub': 'üá∑üá∫ RUB (–†—É–±–ª–∏)',
    'usd': 'üá∫üá∏ USD (–î–æ–ª–ª–∞—Ä—ã)',
    'byn': 'üáßüáæ BYN (–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–µ —Ä—É–±–ª–∏)',
    'kzt': 'üá∞üáø KZT (–¢–µ–Ω–≥–µ)',
    'uah': 'üá∫üá¶ UAH (–ì—Ä–∏–≤–Ω—ã)'
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –° –£–õ–£–ß–®–ï–ù–ù–û–ô –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ï–ô
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if not init_db():
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    user_id = message.from_user.id
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', 
                       (user_id, f"@{message.from_user.username}" if message.from_user.username else "–ë–µ–∑ username"))
        conn.commit()
        conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    if len(message.text.split()) > 1:
        command = message.text.split()[1]
        if command.startswith('join_'):
            trade_unique_id = command.split('_')[1]
            join_trade(message, trade_unique_id)
            return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if message.from_user.id == ADMIN_ID:
        markup.row('üéÅ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', 'üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏')
        markup.row('üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'üí≥ –ë–∞–ª–∞–Ω—Å')
    else:
        markup.row('üéÅ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', 'üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏')
        markup.row('üí≥ –ë–∞–ª–∞–Ω—Å')
    
    bot.send_message(message.chat.id, 
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NFT Trade Bot!",
                    reply_markup=markup)

# –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.text == 'üí≥ –ë–∞–ª–∞–Ω—Å')
def show_balance(message):
    user_id = message.from_user.id
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        conn.close()
        
        if user:
            user_id, username, rub, usd, byn, kzt, uah, stars, card, is_admin = user
            
            balance_text = (
                f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:*\n\n"
                f"‚≠ê –ó–≤–µ–∑–¥—ã: `{stars}`\n"
                f"üá∑üá∫ RUB: `{rub}`\n"
                f"üá∫üá∏ USD: `{usd}`\n"
                f"üáßüáæ BYN: `{byn}`\n"
                f"üá∞üáø KZT: `{kzt}`\n"
                f"üá∫üá¶ UAH: `{uah}`\n\n"
            )
            
            if card:
                balance_text += f"üí≥ –ü—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞: `{card}`\n\n"
            
            if is_admin:
                balance_text += "üëë *–°—Ç–∞—Ç—É—Å: –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†*\nüíé –ë–∞–ª–∞–Ω—Å: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
            else:
                balance_text += "üí° –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /deposit"
            
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton('üí≥ –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É', callback_data='bind_card'),
                types.InlineKeyboardButton('‚≠ê –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤–µ–∑–¥—ã', callback_data='add_stars')
            )
            
            bot.send_message(message.chat.id, balance_text, reply_markup=markup, parse_mode='Markdown')
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")

# –ü—Ä–∏–≤—è–∑–∫–∞ –∫–∞—Ä—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data == 'bind_card')
def bind_card_start(call):
    msg = bot.send_message(call.message.chat.id, "üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä):")
    bot.register_next_step_handler(msg, process_card_number)

def process_card_number(message):
    user_id = message.from_user.id
    card_number = message.text.replace(' ', '')
    
    if len(card_number) != 16 or not card_number.isdigit():
        msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã. –í–≤–µ–¥–∏—Ç–µ 16 —Ü–∏—Ñ—Ä:")
        bot.register_next_step_handler(msg, process_card_number)
        return
    
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET card_number = ? WHERE user_id = ?', (card_number, user_id))
        conn.commit()
        conn.close()
        
        bot.send_message(message.chat.id, "‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞!")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã")

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
@bot.message_handler(func=lambda message: message.text == 'üéÅ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É')
def start_create_trade(message):
    user_id = message.from_user.id
    user_data[user_id] = {'step': 'creating_trade'}
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton(CURRENCIES['stars'], callback_data='currency_stars'),
        types.InlineKeyboardButton(CURRENCIES['rub'], callback_data='currency_rub')
    )
    markup.row(
        types.InlineKeyboardButton(CURRENCIES['usd'], callback_data='currency_usd'),
        types.InlineKeyboardButton(CURRENCIES['byn'], callback_data='currency_byn')
    )
    markup.row(
        types.InlineKeyboardButton(CURRENCIES['kzt'], callback_data='currency_kzt'),
        types.InlineKeyboardButton(CURRENCIES['uah'], callback_data='currency_uah')
    )
    
    bot.send_message(message.chat.id,
                    "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                    reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('currency_'))
def handle_currency_selection(call):
    user_id = call.from_user.id
    currency_code = call.data.split('_')[1]
    
    user_data[user_id]['currency'] = currency_code
    user_data[user_id]['currency_display'] = CURRENCIES[currency_code]
    
    bot.delete_message(call.message.chat.id, call.message.message_id)
    
    msg = bot.send_message(call.message.chat.id,
                         f"‚úÖ –í–∞–ª—é—Ç–∞: {CURRENCIES[currency_code]}\n"
                         "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ NFT –ø–æ–¥–∞—Ä–æ–∫:")
    
    bot.register_next_step_handler(msg, process_nft_url)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ NFT
def process_nft_url(message):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return
    
    user_data[user_id]['nft_url'] = message.text
    
    msg = bot.send_message(message.chat.id, "üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–¥–µ–ª–∫–∏:")
    bot.register_next_step_handler(msg, process_description)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
def process_description(message):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return
    
    user_data[user_id]['description'] = message.text
    
    currency_display = user_data[user_id]['currency_display']
    msg = bot.send_message(message.chat.id, f"üí∞ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ {currency_display}:")
    bot.register_next_step_handler(msg, process_price)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
def process_price(message):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return
    
    try:
        price = float(message.text)
        user_data[user_id]['price'] = price
        show_trade_preview(message.chat.id, user_id)
        
    except ValueError:
        msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã:")
        bot.register_next_step_handler(msg, process_price)

# –ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é —Å–¥–µ–ª–∫–∏
def show_trade_preview(chat_id, user_id):
    trade_data = user_data[user_id]
    
    preview_text = (
        "üéÅ *–ü—Ä–µ–≤—å—é —Å–¥–µ–ª–∫–∏:*\n\n"
        f"üìé NFT: {trade_data['nft_url']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {trade_data['description']}\n"
        f"üí∞ –¶–µ–Ω–∞: {trade_data['price']} {trade_data['currency_display']}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm_trade'),
        types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_trade')
    )
    
    bot.send_message(chat_id, preview_text, reply_markup=markup, parse_mode='Markdown')

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
@bot.callback_query_handler(func=lambda call: call.data in ['confirm_trade', 'cancel_trade'])
def handle_trade_confirmation(call):
    user_id = call.from_user.id
    
    if call.data == 'confirm_trade':
        trade_unique_id = generate_trade_id()
        user_data[user_id]['trade_unique_id'] = trade_unique_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É
        save_trade_to_db(user_id, user_data[user_id])
        
        trade_link = f"https://t.me/{bot.get_me().username}?start=join_{trade_unique_id}"
        
        success_text = (
            "‚úÖ *–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
            f"üîó *–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:*\n`{trade_link}`\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"
        )
        
        bot.edit_message_text(success_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown')
        
        if user_id in user_data:
            del user_data[user_id]
            
    else:
        bot.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", call.message.chat.id, call.message.message_id)
        if user_id in user_data:
            del user_data[user_id]

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –±–∞–∑—É
def save_trade_to_db(user_id, trade_data):
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        
        username = f"@{bot.get_chat(user_id).username}" if bot.get_chat(user_id).username else "–ë–µ–∑ username"
        
        cursor.execute('''
            INSERT INTO trades (trade_unique_id, seller_id, seller_username, nft_url, description, price, currency)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (trade_data['trade_unique_id'], user_id, username,
              trade_data['nft_url'], trade_data['description'], 
              trade_data['price'], trade_data['currency']))
        
        conn.commit()
        conn.close()
        print(f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {trade_data['trade_unique_id']}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")

# –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–¥–µ–ª–∫–µ
def join_trade(message, trade_unique_id):
    user_id = message.from_user.id
    username = f"@{message.from_user.username}" if message.from_user.username else "–ë–µ–∑ username"
    
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM trades WHERE trade_unique_id = ?', (trade_unique_id,))
        trade = cursor.fetchone()
        
        if not trade:
            bot.send_message(message.chat.id, "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            conn.close()
            return
        
        trade_id, trade_unique_id, seller_id, seller_username, buyer_id, buyer_username, nft_url, description, price, currency, status, created_at = trade
        
        if user_id == seller_id:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–ª—å–∑—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π —Å–¥–µ–ª–∫–µ")
            conn.close()
            return
        
        if buyer_id is not None:
            bot.send_message(message.chat.id, "‚ùå –í —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ —É–∂–µ –µ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å")
            conn.close()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
        cursor.execute('UPDATE trades SET buyer_id = ?, buyer_username = ?, status = ? WHERE id = ?',
                      (user_id, username, 'waiting_payment', trade_id))
        
        conn.commit()
        conn.close()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        bot.send_message(user_id,
                        f"‚úÖ *–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–¥–µ–ª–∫–µ!*\n\n"
                        f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_username}\n"
                        f"üéÅ NFT: {nft_url}\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                        f"üí∞ –¶–µ–Ω–∞: {price} {CURRENCIES[currency]}\n\n"
                        f"üí° *–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:*\n"
                        f"1. –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å username –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏\n"
                        f"2. –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞\n"
                        f"3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                        parse_mode='Markdown')
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
        bot.send_message(seller_id,
                        f"üéâ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–π —Å–¥–µ–ª–∫–µ!*\n\n"
                        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {username}\n"
                        f"üí∞ –°—É–º–º–∞: {price} {CURRENCIES[currency]}\n\n"
                        f"‚è≥ *–û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è...*\n"
                        f"–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –æ–ø–ª–∞—Ç—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
                        parse_mode='Markdown')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton('üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', callback_data=f'payment_{trade_id}'))
        
        bot.send_message(user_id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:", reply_markup=markup)
        
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

# –ú–æ–∏ —Å–¥–µ–ª–∫–∏ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
@bot.message_handler(func=lambda message: message.text == 'üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏')
def my_trades(message):
    user_id = message.from_user.id
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        
        # –°–¥–µ–ª–∫–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–≤–µ—Ü
        cursor.execute('SELECT * FROM trades WHERE seller_id = ? ORDER BY created_at DESC', (user_id,))
        seller_trades = cursor.fetchall()
        
        # –°–¥–µ–ª–∫–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
        cursor.execute('SELECT * FROM trades WHERE buyer_id = ? ORDER BY created_at DESC', (user_id,))
        buyer_trades = cursor.fetchall()
        
        conn.close()
        
        if not seller_trades and not buyer_trades:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫")
            return
        
        if seller_trades:
            bot.send_message(message.chat.id, "üè™ *–°–¥–µ–ª–∫–∏ –≥–¥–µ –≤—ã –ø—Ä–æ–¥–∞–≤–µ—Ü:*", parse_mode='Markdown')
            for trade in seller_trades:
                show_trade_info(message.chat.id, trade, 'seller')
        
        if buyer_trades:
            bot.send_message(message.chat.id, "üõí *–°–¥–µ–ª–∫–∏ –≥–¥–µ –≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å:*", parse_mode='Markdown')
            for trade in buyer_trades:
                show_trade_info(message.chat.id, trade, 'buyer')
                
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫")
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–∏—Ö —Å–¥–µ–ª–æ–∫: {e}")

def show_trade_info(chat_id, trade, role):
    try:
        trade_id, trade_unique_id, seller_id, seller_username, buyer_id, buyer_username, nft_url, description, price, currency, status, created_at = trade
        
        status_emoji = {
            'waiting_payment': '‚è≥',
            'waiting_delivery': 'üì¶', 
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }
        
        text = (
            f"üéÅ *–°–¥–µ–ª–∫–∞ #{trade_id}*\n"
            f"üí∞ {price} {CURRENCIES[currency]}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji.get(status, '‚ö°')} {status}\n"
            f"üïê {created_at[:16]}"
        )
        
        if role == 'seller' and buyer_username:
            text += f"\nüë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer_username}"
        elif role == 'buyer':
            text += f"\nüë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_username}"
        
        bot.send_message(chat_id, text, parse_mode='Markdown')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–¥–µ–ª–∫–∏: {e}")

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@bot.message_handler(func=lambda message: message.text == 'üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' and message.from_user.id == ADMIN_ID)
def admin_panel(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='admin_stats'),
        types.InlineKeyboardButton('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data='admin_users')
    )
    
    bot.send_message(message.chat.id, 
                    "üõ†Ô∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
                    "üëë –°—Ç–∞—Ç—É—Å: –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†\n"
                    "üíé –ë–∞–ª–∞–Ω—Å: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π\n"
                    "‚ö° –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏: –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    reply_markup=markup, parse_mode='Markdown')

@bot.message_handler(commands=['test'])
def send_test(message):
    bot.reply_to(message, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if init_db():
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Å–¥–µ–ª–æ–∫!")
        bot.infinity_polling()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ë–î")

