import os
import sqlite3
import telebot
from telebot import types
import time
import random
import string

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = 6540509823  # –í–ê–® –†–ï–ê–õ–¨–ù–´–ô ID

bot = telebot.TeleBot(BOT_TOKEN)

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –¥–ª—è —Å–¥–µ–ª–æ–∫
def generate_trade_id():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS trades (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                trade_unique_id TEXT UNIQUE,
                seller_id INTEGER,
                seller_username TEXT,
                buyer_id INTEGER,
                buyer_username TEXT,
                nft_url TEXT,
                description TEXT,
                price REAL,
                currency TEXT,
                status TEXT DEFAULT 'waiting_buyer',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                balance_rub REAL DEFAULT 1000,
                balance_usd REAL DEFAULT 100,
                balance_byn REAL DEFAULT 500,
                balance_kzt REAL DEFAULT 50000,
                balance_uah REAL DEFAULT 4000,
                stars INTEGER DEFAULT 50,
                card_number TEXT,
                is_admin BOOLEAN DEFAULT FALSE
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id, username, is_admin)
            VALUES (?, 'admin', TRUE)
        ''', (ADMIN_ID,))
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_data = {}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã
CURRENCIES = {
    'stars': '‚≠ê –ó–≤–µ–∑–¥—ã',
    'rub': 'üá∑üá∫ RUB (–†—É–±–ª–∏)',
    'usd': 'üá∫üá∏ USD (–î–æ–ª–ª–∞—Ä—ã)',
    'byn': 'üáßüáæ BYN (–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–µ —Ä—É–±–ª–∏)',
    'kzt': 'üá∞üáø KZT (–¢–µ–Ω–≥–µ)',
    'uah': 'üá∫üá¶ UAH (–ì—Ä–∏–≤–Ω—ã)'
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if not init_db():
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    user_id = message.from_user.id
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', 
                       (user_id, f"@{message.from_user.username}" if message.from_user.username else "–ë–µ–∑ username"))
        conn.commit()
        conn.close()
    except:
        pass
    
    # –ü–†–û–í–ï–†–Ø–ï–ú –°–°–´–õ–ö–£ –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–Ø
    if len(message.text.split()) > 1:
        command_parts = message.text.split()
        if len(command_parts) >= 2:
            param = command_parts[1]
            if param.startswith('join_'):
                trade_unique_id = param.replace('join_', '')
                print(f"üîó –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ: {trade_unique_id}")
                process_join_trade(message, trade_unique_id)
                return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if message.from_user.id == ADMIN_ID:
        markup.row('üéÅ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', 'üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏')
        markup.row('üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'üí≥ –ë–∞–ª–∞–Ω—Å')
    else:
        markup.row('üéÅ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', 'üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏')
        markup.row('üí≥ –ë–∞–ª–∞–Ω—Å')
    
    bot.send_message(message.chat.id, 
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NFT Trade Bot!",
                    reply_markup=markup)

# –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ
def process_join_trade(message, trade_unique_id):
    user_id = message.from_user.id
    username = f"@{message.from_user.username}" if message.from_user.username else "–ë–µ–∑ username"
    
    print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫ —Å–¥–µ–ª–∫–µ {trade_unique_id}")
    
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–¥–µ–ª–∫—É
        cursor.execute('SELECT * FROM trades WHERE trade_unique_id = ?', (trade_unique_id,))
        trade = cursor.fetchone()
        
        if not trade:
            print(f"‚ùå –°–¥–µ–ª–∫–∞ {trade_unique_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            bot.send_message(message.chat.id, "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞")
            conn.close()
            return
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        (trade_id, trade_unique_id_db, seller_id, seller_username, 
         buyer_id, buyer_username, nft_url, description, price, 
         currency, status, created_at) = trade
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–∞ —Å–¥–µ–ª–∫–∞: ID {trade_id}, –ø—Ä–æ–¥–∞–≤–µ—Ü {seller_id}, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å {buyer_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
        if user_id == seller_id:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π —Å–¥–µ–ª–∫–µ")
            bot.send_message(message.chat.id, 
                           "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ!\n\n"
                           "üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
            conn.close()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        if buyer_id is not None:
            print(f"‚ùå –í —Å–¥–µ–ª–∫–µ {trade_id} —É–∂–µ –µ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å {buyer_id}")
            bot.send_message(message.chat.id, "‚ùå –í —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ —É–∂–µ –µ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å")
            conn.close()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
        cursor.execute('''
            UPDATE trades 
            SET buyer_id = ?, buyer_username = ?, status = ? 
            WHERE id = ?
        ''', (user_id, username, 'waiting_payment', trade_id))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–¥–µ–ª–∫–µ {trade_id}")
        
        # –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –î–õ–Ø –ü–û–ö–£–ü–ê–¢–ï–õ–Ø
        buyer_message = (
            "‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–¥–µ–ª–∫–µ!\n\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_username}\n"
            f"üéÅ NFT: {nft_url}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"üí∞ –¶–µ–Ω–∞: {price} {CURRENCIES[currency]}\n\n"
            "üí° –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton('üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', callback_data=f'start_payment_{trade_id}'))
        markup.row(types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data=f'cancel_trade_buyer_{trade_id}'))
        
        bot.send_message(user_id, buyer_message, reply_markup=markup)
        
        # –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –î–õ–Ø –ü–†–û–î–ê–í–¶–ê
        seller_message = (
            "üéâ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–π —Å–¥–µ–ª–∫–µ!\n\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {username}\n"
            f"üí∞ –°—É–º–º–∞: {price} {CURRENCIES[currency]}\n\n"
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è..."
        )
        
        markup_seller = types.InlineKeyboardMarkup()
        markup_seller.row(types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data=f'cancel_trade_seller_{trade_id}'))
        
        bot.send_message(seller_id, seller_message, reply_markup=markup_seller)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ")

# –§–£–ù–ö–¶–ò–Ø –û–¢–ú–ï–ù–´ –°–î–ï–õ–ö–ò
@bot.callback_query_handler(func=lambda call: call.data.startswith(('cancel_trade_seller_', 'cancel_trade_buyer_')))
def handle_trade_cancellation(call):
    data_parts = call.data.split('_')
    user_type = data_parts[2]  # seller –∏–ª–∏ buyer
    trade_id = int(data_parts[3])
    user_id = call.from_user.id
    
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ
        cursor.execute('SELECT * FROM trades WHERE id = ?', (trade_id,))
        trade = cursor.fetchone()
        
        if not trade:
            bot.answer_callback_query(call.id, "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            conn.close()
            return
        
        (trade_id, trade_unique_id, seller_id, seller_username, 
         buyer_id, buyer_username, nft_url, description, price, 
         currency, status, created_at) = trade
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Ç–º–µ–Ω—É
        if user_type == 'seller' and user_id != seller_id:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É")
            conn.close()
            return
        elif user_type == 'buyer' and user_id != buyer_id:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É")
            conn.close()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
        cursor.execute('UPDATE trades SET status = ? WHERE id = ?', ('cancelled', trade_id))
        conn.commit()
        conn.close()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        if user_type == 'seller':
            cancel_reason = "–ø—Ä–æ–¥–∞–≤—Ü–æ–º"
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            if buyer_id:
                bot.send_message(buyer_id, 
                               f"‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º\n\n"
                               f"üéÅ –°–¥–µ–ª–∫–∞ #{trade_id}\n"
                               f"üí∞ {price} {CURRENCIES[currency]}\n\n"
                               f"üí° –ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–º–µ–Ω–∏–ª —Å–¥–µ–ª–∫—É. –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã.")
        else:  # buyer
            cancel_reason = "–ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º"
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
            bot.send_message(seller_id, 
                           f"‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º\n\n"
                           f"üéÅ –°–¥–µ–ª–∫–∞ #{trade_id}\n"
                           f"üí∞ {price} {CURRENCIES[currency]}\n\n"
                           f"üí° –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Å–¥–µ–ª–∫—É.")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –æ—Ç–º–µ–Ω—ã
        bot.edit_message_text(
            f"‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
            f"üéÅ –°–¥–µ–ª–∫–∞ #{trade_id}\n"
            f"üí∞ {price} {CURRENCIES[currency]}\n\n"
            f"üí° –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ {cancel_reason}",
            call.message.chat.id, call.message.message_id
        )
        
        print(f"‚úÖ –°–¥–µ–ª–∫–∞ {trade_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ {user_type} {user_id}")
        
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏")
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏: {e}")

# –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.text == 'üí≥ –ë–∞–ª–∞–Ω—Å')
def show_balance(message):
    user_id = message.from_user.id
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        conn.close()
        
        if user:
            user_id, username, rub, usd, byn, kzt, uah, stars, card, is_admin = user
            
            balance_text = (
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:\n\n"
                f"‚≠ê –ó–≤–µ–∑–¥—ã: {stars}\n"
                f"üá∑üá∫ RUB: {rub}\n"
                f"üá∫üá∏ USD: {usd}\n"
                f"üáßüáæ BYN: {byn}\n"
                f"üá∞üáø KZT: {kzt}\n"
                f"üá∫üá¶ UAH: {uah}\n\n"
            )
            
            if card:
                balance_text += f"üí≥ –ü—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞: {card}\n\n"
            
            if is_admin:
                balance_text += "üëë –°—Ç–∞—Ç—É—Å: –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†\nüíé –ë–∞–ª–∞–Ω—Å: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
            else:
                balance_text += "üí° –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /deposit"
            
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton('üí≥ –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É', callback_data='bind_card'),
                types.InlineKeyboardButton('‚≠ê –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤–µ–∑–¥—ã', callback_data='add_stars')
            )
            
            bot.send_message(message.chat.id, balance_text, reply_markup=markup)
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞")

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
@bot.message_handler(func=lambda message: message.text == 'üéÅ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É')
def start_create_trade(message):
    user_id = message.from_user.id
    user_data[user_id] = {'step': 'creating_trade'}
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton(CURRENCIES['stars'], callback_data='currency_stars'),
        types.InlineKeyboardButton(CURRENCIES['rub'], callback_data='currency_rub')
    )
    markup.row(
        types.InlineKeyboardButton(CURRENCIES['usd'], callback_data='currency_usd'),
        types.InlineKeyboardButton(CURRENCIES['byn'], callback_data='currency_byn')
    )
    markup.row(
        types.InlineKeyboardButton(CURRENCIES['kzt'], callback_data='currency_kzt'),
        types.InlineKeyboardButton(CURRENCIES['uah'], callback_data='currency_uah')
    )
    
    bot.send_message(message.chat.id,
                    "üéÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏\n\n"
                    "üíµ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                    reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('currency_'))
def handle_currency_selection(call):
    user_id = call.from_user.id
    currency_code = call.data.split('_')[1]
    
    user_data[user_id]['currency'] = currency_code
    user_data[user_id]['currency_display'] = CURRENCIES[currency_code]
    
    bot.delete_message(call.message.chat.id, call.message.message_id)
    
    msg = bot.send_message(call.message.chat.id,
                         f"‚úÖ –í–∞–ª—é—Ç–∞: {CURRENCIES[currency_code]}\n\n"
                         "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ NFT –ø–æ–¥–∞—Ä–æ–∫:")
    
    bot.register_next_step_handler(msg, process_nft_url)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ NFT
def process_nft_url(message):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return
    
    user_data[user_id]['nft_url'] = message.text
    
    msg = bot.send_message(message.chat.id, "üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–¥–µ–ª–∫–∏:")
    bot.register_next_step_handler(msg, process_description)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
def process_description(message):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return
    
    user_data[user_id]['description'] = message.text
    
    currency_display = user_data[user_id]['currency_display']
    msg = bot.send_message(message.chat.id, f"üí∞ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ {currency_display} (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    bot.register_next_step_handler(msg, process_price)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
def process_price(message):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return
    
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        user_data[user_id]['price'] = price
        show_trade_preview(message.chat.id, user_id)
        
    except ValueError:
        msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã:")
        bot.register_next_step_handler(msg, process_price)

# –ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é —Å–¥–µ–ª–∫–∏
def show_trade_preview(chat_id, user_id):
    trade_data = user_data[user_id]
    
    preview_text = (
        "üéÅ –ü—Ä–µ–≤—å—é —Å–¥–µ–ª–∫–∏:\n\n"
        f"üìé NFT: {trade_data['nft_url']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {trade_data['description']}\n"
        f"üí∞ –¶–µ–Ω–∞: {trade_data['price']} {trade_data['currency_display']}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm_trade'),
        types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_trade_creation')
    )
    
    bot.send_message(chat_id, preview_text, reply_markup=markup)

# –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == 'cancel_trade_creation')
def cancel_trade_creation(call):
    user_id = call.from_user.id
    bot.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", call.message.chat.id, call.message.message_id)
    if user_id in user_data:
        del user_data[user_id]

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == 'confirm_trade')
def handle_trade_confirmation(call):
    user_id = call.from_user.id
    
    if call.data == 'confirm_trade':
        trade_unique_id = generate_trade_id()
        user_data[user_id]['trade_unique_id'] = trade_unique_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É
        save_trade_to_db(user_id, user_data[user_id])
        
        # –°–û–ó–î–ê–ï–ú –°–°–´–õ–ö–£ –î–õ–Ø –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–Ø
        join_link = f"https://t.me/{bot.get_me().username}?start=join_{trade_unique_id}"
        
        success_text = (
            "‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üéÅ –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\n"
            f"{join_link}\n\n"
            f"üìé NFT: {user_data[user_id]['nft_url']}\n"
            f"üí∞ –¶–µ–Ω–∞: {user_data[user_id]['price']} {user_data[user_id]['currency_display']}\n\n"
            f"üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é\n"
            f"‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π —Å–¥–µ–ª–∫–µ"
        )
        
        bot.edit_message_text(success_text, call.message.chat.id, call.message.message_id)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in user_data:
            del user_data[user_id]
            
    else:
        bot.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", call.message.chat.id, call.message.message_id)
        if user_id in user_data:
            del user_data[user_id]

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –±–∞–∑—É
def save_trade_to_db(user_id, trade_data):
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        
        username = f"@{bot.get_chat(user_id).username}" if bot.get_chat(user_id).username else "–ë–µ–∑ username"
        
        cursor.execute('''
            INSERT INTO trades (trade_unique_id, seller_id, seller_username, nft_url, description, price, currency)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (trade_data['trade_unique_id'], user_id, username,
              trade_data['nft_url'], trade_data['description'], 
              trade_data['price'], trade_data['currency']))
        
        conn.commit()
        conn.close()
        print(f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {trade_data['trade_unique_id']}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")

# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–µ–∑–¥
def process_stars_payment(trade_id, buyer_id):
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ
        cursor.execute('SELECT * FROM trades WHERE id = ?', (trade_id,))
        trade = cursor.fetchone()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (buyer_id,))
        user = cursor.fetchone()
        
        if not trade or not user:
            conn.close()
            return False, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
        
        (trade_id, trade_unique_id, seller_id, seller_username, 
         buyer_id_db, buyer_username, nft_url, description, price, 
         currency, status, created_at) = trade
        
        user_id_db, username, rub, usd, byn, kzt, uah, stars, card, is_admin = user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        if buyer_id != buyer_id_db:
            conn.close()
            return False, "‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã
        if not is_admin:
            if stars < price:
                conn.close()
                return False, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: {stars}‚≠ê"
            
            # –°–ø–∏—Å–∞–Ω–∏–µ –∑–≤–µ–∑–¥ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            new_stars = stars - price
            cursor.execute('UPDATE users SET stars = ? WHERE user_id = ?', (new_stars, buyer_id))
            
            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –ø—Ä–æ–¥–∞–≤—Ü—É (–µ—Å–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –∞–¥–º–∏–Ω)
            cursor.execute('SELECT is_admin FROM users WHERE user_id = ?', (seller_id,))
            seller_is_admin = cursor.fetchone()[0]
            
            if not seller_is_admin:
                cursor.execute('SELECT stars FROM users WHERE user_id = ?', (seller_id,))
                seller_stars = cursor.fetchone()[0]
                new_seller_stars = seller_stars + price
                cursor.execute('UPDATE users SET stars = ? WHERE user_id = ?', (new_seller_stars, seller_id))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
        cursor.execute('UPDATE trades SET status = ? WHERE id = ?', ('waiting_delivery', trade_id))
        
        conn.commit()
        conn.close()
        
        return True, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã: {e}")
        return False, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã"

# –ù–∞—á–∞–ª–æ –æ–ø–ª–∞—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('start_payment_'))
def handle_payment_start(call):
    trade_id = int(call.data.split('_')[2])
    user_id = call.from_user.id
    
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM trades WHERE id = ?', (trade_id,))
        trade = cursor.fetchone()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        
        if not trade or not user:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
            conn.close()
            return
        
        (trade_id, trade_unique_id, seller_id, seller_username, 
         buyer_id, buyer_username, nft_url, description, price, 
         currency, status, created_at) = trade
        
        user_id_db, username, rub, usd, byn, kzt, uah, stars, card, is_admin = user
        
        if user_id != buyer_id:
            bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏")
            conn.close()
            return
        
        conn.close()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)
        if not is_admin:
            if currency == 'stars' and stars < price:
                bot.send_message(user_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: {stars}‚≠ê")
                return
            elif currency == 'rub' and rub < price:
                bot.send_message(user_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É–±–ª–µ–π. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: {rub}‚ÇΩ")
                return
            elif currency == 'usd' and usd < price:
                bot.send_message(user_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–ª–∞—Ä–æ–≤. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: {usd}$")
                return
            elif currency == 'byn' and byn < price:
                bot.send_message(user_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BYN. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: {byn} BYN")
                return
            elif currency == 'kzt' and kzt < price:
                bot.send_message(user_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–Ω–≥–µ. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: {kzt}‚Ç∏")
                return
            elif currency == 'uah' and uah < price:
                bot.send_message(user_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä–∏–≤–µ–Ω. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: {uah}‚Ç¥")
                return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
        payment_text = (
            f"üí≥ –û–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏\n\n"
            f"üí∞ –°—É–º–º–∞: {price} {CURRENCIES[currency]}\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_username}\n\n"
        )
        
        markup = types.InlineKeyboardMarkup()
        
        if currency == 'stars':
            if is_admin:
                payment_text += "üëë –ê–î–ú–ò–ù –û–ü–õ–ê–¢–ê:\n–£ –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–≤–µ–∑–¥—ã!"
            else:
                payment_text += f"‚≠ê –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏:\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: {stars}‚≠ê\n–ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ: {price}‚≠ê"
            
            markup.row(types.InlineKeyboardButton('‚≠ê –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞) –∑–≤–µ–∑–¥–∞–º–∏', callback_data=f'confirm_payment_{trade_id}'))
        else:
            payment_text += f"üí≥ –û–ø–ª–∞—Ç–∞ {CURRENCIES[currency]}:\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–∞—Ä—Ç–∞ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
            markup.row(types.InlineKeyboardButton('üí≥ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞) –∫–∞—Ä—Ç–æ–π', callback_data=f'confirm_payment_{trade_id}'))
        
        markup.row(types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data=f'cancel_trade_buyer_{trade_id}'))
        
        bot.edit_message_text(payment_text, call.message.chat.id, call.message.message_id, 
                             reply_markup=markup)
        
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã")

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_payment_'))
def handle_payment_confirmation(call):
    trade_id = int(call.data.split('_')[2])
    user_id = call.from_user.id
    
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM trades WHERE id = ?', (trade_id,))
        trade = cursor.fetchone()
        
        if not trade:
            bot.answer_callback_query(call.id, "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            conn.close()
            return
        
        (trade_id, trade_unique_id, seller_id, seller_username, 
         buyer_id, buyer_username, nft_url, description, price, 
         currency, status, created_at) = trade
        
        if user_id != buyer_id:
            bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏")
            conn.close()
            return
        
        conn.close()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É
        if currency == 'stars':
            success, message = process_stars_payment(trade_id, user_id)
            
            if success:
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
                buyer_message = (
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"üí∞ –°—É–º–º–∞: {price} {CURRENCIES[currency]}\n"
                    f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_username}\n\n"
                    "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è NFT –ø–æ–¥–∞—Ä–∫–∞ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞"
                )
                
                bot.edit_message_text(buyer_message, call.message.chat.id, call.message.message_id)
                
                # –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ü–†–û–î–ê–í–¶–£ –û –ü–û–õ–£–ß–ï–ù–ò–ò –û–ü–õ–ê–¢–´
                seller_message = (
                    "üí∞ –ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–¥–µ–ª–∫—É!\n\n"
                    f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer_username}\n"
                    f"üéÅ NFT: {nft_url}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                    f"üí∞ –°—É–º–º–∞: {price} {CURRENCIES[currency]}\n\n"
                    "üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ NFT –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É"
                )
                
                markup_seller = types.InlineKeyboardMarkup()
                markup_seller.row(
                    types.InlineKeyboardButton('‚úÖ –Ø –ø–µ—Ä–µ–≤–µ–ª(–∞) –ø–æ–¥–∞—Ä–æ–∫', callback_data=f'confirm_delivery_{trade_id}')
                )
                
                bot.send_message(seller_id, seller_message, reply_markup=markup_seller)
                
            else:
                bot.answer_callback_query(call.id, message)
                bot.send_message(user_id, message)
        
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
            bot.answer_callback_query(call.id, "‚è≥ –û–ø–ª–∞—Ç–∞ –¥—Ä—É–≥–∏–º–∏ –≤–∞–ª—é—Ç–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã: {e}")

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º
@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delivery_'))
def handle_delivery_confirmation(call):
    trade_id = int(call.data.split('_')[2])
    user_id = call.from_user.id
    
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM trades WHERE id = ?', (trade_id,))
        trade = cursor.fetchone()
        
        if not trade:
            bot.answer_callback_query(call.id, "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            conn.close()
            return
        
        (trade_id, trade_unique_id, seller_id, seller_username, 
         buyer_id, buyer_username, nft_url, description, price, 
         currency, status, created_at) = trade
        
        if user_id != seller_id:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É")
            conn.close()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        cursor.execute('UPDATE trades SET status = ? WHERE id = ?', ('completed', trade_id))
        conn.commit()
        conn.close()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
        seller_message = (
            "‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üéÅ –°–¥–µ–ª–∫–∞ #{trade_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {price} {CURRENCIES[currency]}\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer_username}\n\n"
            "üíñ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
        )
        
        bot.edit_message_text(seller_message, call.message.chat.id, call.message.message_id)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        buyer_message = (
            "üéâ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üéÅ –°–¥–µ–ª–∫–∞ #{trade_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_username}\n"
            f"üìé NFT: {nft_url}\n\n"
            "üíñ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –≤–∞—à–∏–º NFT –ø–æ–¥–∞—Ä–∫–æ–º!\n"
            "‚≠ê –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
        )
        
        bot.send_message(buyer_id, buyer_message)
        
        print(f"‚úÖ –°–¥–µ–ª–∫–∞ {trade_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")

# –ú–æ–∏ —Å–¥–µ–ª–∫–∏ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ö–ù–û–ü–ö–ê–ú–ò –û–¢–ú–ï–ù–´
@bot.message_handler(func=lambda message: message.text == 'üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏')
def my_trades(message):
    user_id = message.from_user.id
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        
        # –°–¥–µ–ª–∫–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–≤–µ—Ü
        cursor.execute('SELECT * FROM trades WHERE seller_id = ? ORDER BY created_at DESC', (user_id,))
        seller_trades = cursor.fetchall()
        
        # –°–¥–µ–ª–∫–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
        cursor.execute('SELECT * FROM trades WHERE buyer_id = ? ORDER BY created_at DESC', (user_id,))
        buyer_trades = cursor.fetchall()
        
        conn.close()
        
        if not seller_trades and not buyer_trades:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫")
            return
        
        if seller_trades:
            bot.send_message(message.chat.id, "üè™ –°–¥–µ–ª–∫–∏ –≥–¥–µ –≤—ã –ø—Ä–æ–¥–∞–≤–µ—Ü:")
            for trade in seller_trades:
                show_trade_info(message.chat.id, trade, 'seller', user_id)
        
        if buyer_trades:
            bot.send_message(message.chat.id, "üõí –°–¥–µ–ª–∫–∏ –≥–¥–µ –≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å:")
            for trade in buyer_trades:
                show_trade_info(message.chat.id, trade, 'buyer', user_id)
                
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫")

def show_trade_info(chat_id, trade, role, user_id):
    try:
        (trade_id, trade_unique_id, seller_id, seller_username, 
         buyer_id, buyer_username, nft_url, description, price, 
         currency, status, created_at) = trade
        
        status_emoji = {
            'waiting_buyer': '‚è≥',
            'waiting_payment': 'üí≥',
            'waiting_delivery': 'üì¶',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }
        
        text = (
            f"üéÅ –°–¥–µ–ª–∫–∞ #{trade_id}\n"
            f"üí∞ {price} {CURRENCIES[currency]}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji.get(status, '‚ö°')} {status}\n"
            f"üïê {created_at[:16]}"
        )
        
        if role == 'seller' and buyer_username:
            text += f"\nüë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer_username}"
        elif role == 'buyer':
            text += f"\nüë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_username}"
        
        markup = types.InlineKeyboardMarkup()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ä–æ–ª–∏
        if status == 'waiting_delivery' and role == 'seller':
            markup.row(types.InlineKeyboardButton('‚úÖ –Ø –ø–µ—Ä–µ–≤–µ–ª(–∞) –ø–æ–¥–∞—Ä–æ–∫', callback_data=f'confirm_delivery_{trade_id}'))
        elif status in ['waiting_buyer', 'waiting_payment']:
            if role == 'seller':
                markup.row(types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data=f'cancel_trade_seller_{trade_id}'))
            elif role == 'buyer':
                markup.row(types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data=f'cancel_trade_buyer_{trade_id}'))
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –∏ —Å–¥–µ–ª–∫–∞ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
        if role == 'seller' and status == 'waiting_buyer':
            join_link = f"https://t.me/{bot.get_me().username}?start=join_{trade_unique_id}"
            text += f"\nüîó –°—Å—ã–ª–∫–∞: {join_link}"
        
        bot.send_message(chat_id, text, reply_markup=markup)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–¥–µ–ª–∫–∏: {e}")

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@bot.message_handler(func=lambda message: message.text == 'üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' and message.from_user.id == ADMIN_ID)
def admin_panel(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='admin_stats'),
        types.InlineKeyboardButton('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data='admin_users')
    )
    
    bot.send_message(message.chat.id, 
                    "üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                    "üëë –°—Ç–∞—Ç—É—Å: –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†\n"
                    "üíé –ë–∞–ª–∞–Ω—Å: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π\n"
                    "‚ö° –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏: –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    reply_markup=markup)

@bot.message_handler(commands=['test'])
def send_test(message):
    bot.reply_to(message, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("ü§ñ –ó–∞–ø—É—Å–∫ NFT Trade Bot...")
    print(f"üëë –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    if init_db():
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try:
            bot.remove_webhook()
            time.sleep(1)
        except:
            pass
        
        try:
            bot.infinity_polling()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")


