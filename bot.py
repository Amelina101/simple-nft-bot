import os
import sqlite3
import telebot
from telebot import types
import time
import random
import string

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = 6540509823  # –í–ê–® –†–ï–ê–õ–¨–ù–´–ô ID

bot = telebot.TeleBot(BOT_TOKEN)

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –¥–ª—è —Å–¥–µ–ª–æ–∫
def generate_trade_id():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
def init_db():
    conn = sqlite3.connect('trades.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS trades (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            trade_unique_id TEXT UNIQUE,
            user_id INTEGER,
            user_username TEXT,
            nft_url TEXT,
            description TEXT,
            price REAL,
            currency TEXT,
            status TEXT DEFAULT 'active',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–æ–∫
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS trade_participants (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            trade_id INTEGER,
            user_id INTEGER,
            user_username TEXT,
            status TEXT DEFAULT 'joined',
            joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (trade_id) REFERENCES trades (id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö —Å–¥–µ–ª–∫–∞—Ö
user_data = {}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã
CURRENCIES = {
    'stars': '‚≠ê –ó–≤–µ–∑–¥—ã',
    'rub': 'üá∑üá∫ RUB (–†—É–±–ª–∏)',
    'usd': 'üá∫üá∏ USD (–î–æ–ª–ª–∞—Ä—ã)',
    'byn': 'üáßüáæ BYN (–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–µ —Ä—É–±–ª–∏)',
    'kzt': 'üá∞üáø KZT (–¢–µ–Ω–≥–µ)',
    'uah': 'üá∫üá¶ UAH (–ì—Ä–∏–≤–Ω—ã)'
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def send_welcome(message):
    init_db()
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if message.from_user.id == ADMIN_ID:
        markup.row('üéÅ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', 'üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏')
        markup.row('üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    else:
        markup.row('üéÅ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', 'üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏')
        markup.row('üõ†Ô∏è –ú–∞–≥–∞–∑–∏–Ω NFT')
    
    bot.send_message(message.chat.id, 
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NFT Trade Bot!\n\n"
                    "üéÅ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∫–∏ —Å NFT –ø–æ–¥–∞—Ä–∫–∞–º–∏\n"
                    "üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º\n"
                    "üíµ –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã",
                    reply_markup=markup)

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
@bot.message_handler(func=lambda message: message.text == 'üéÅ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É')
def start_create_trade(message):
    user_id = message.from_user.id
    user_data[user_id] = {}
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton(CURRENCIES['stars'], callback_data='currency_stars'),
        types.InlineKeyboardButton(CURRENCIES['rub'], callback_data='currency_rub')
    )
    markup.row(
        types.InlineKeyboardButton(CURRENCIES['usd'], callback_data='currency_usd'),
        types.InlineKeyboardButton(CURRENCIES['byn'], callback_data='currency_byn')
    )
    markup.row(
        types.InlineKeyboardButton(CURRENCIES['kzt'], callback_data='currency_kzt'),
        types.InlineKeyboardButton(CURRENCIES['uah'], callback_data='currency_uah')
    )
    
    bot.send_message(message.chat.id,
                    "üéÅ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏*\n\n"
                    "üíµ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                    reply_markup=markup, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('currency_'))
def handle_currency_selection(call):
    user_id = call.from_user.id
    currency_code = call.data.split('_')[1]
    
    user_data[user_id]['currency'] = CURRENCIES[currency_code]
    user_data[user_id]['currency_code'] = currency_code
    
    bot.delete_message(call.message.chat.id, call.message.message_id)
    
    msg = bot.send_message(call.message.chat.id,
                         f"‚úÖ –í–∞–ª—é—Ç–∞ –æ–ø–ª–∞—Ç—ã: {user_data[user_id]['currency']}\n\n"
                         "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ NFT –ø–æ–¥–∞—Ä–æ–∫:")
    
    bot.register_next_step_handler(msg, process_nft_url)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ NFT
def process_nft_url(message):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return
    
    user_data[user_id]['nft_url'] = message.text
    
    msg = bot.send_message(message.chat.id,
                         "üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π —Å–¥–µ–ª–∫–∏:")
    
    bot.register_next_step_handler(msg, process_description)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
def process_description(message):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return
    
    user_data[user_id]['description'] = message.text
    
    currency_display = user_data[user_id]['currency']
    msg = bot.send_message(message.chat.id,
                         f"üí∞ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ {currency_display} (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    
    bot.register_next_step_handler(msg, process_price)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
def process_price(message):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return
    
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        user_data[user_id]['price'] = price
        show_trade_preview(message.chat.id, user_id)
        
    except ValueError:
        msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã:")
        bot.register_next_step_handler(msg, process_price)

# –ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é —Å–¥–µ–ª–∫–∏
def show_trade_preview(chat_id, user_id):
    trade_data = user_data[user_id]
    
    preview_text = (
        "üéÅ *–ü—Ä–µ–≤—å—é —Å–¥–µ–ª–∫–∏*\n\n"
        f"üìé NFT: {trade_data['nft_url']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {trade_data['description']}\n"
        f"üí∞ –¶–µ–Ω–∞: {trade_data['price']} {trade_data['currency']}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm_trade'),
        types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_trade')
    )
    
    bot.send_message(chat_id, preview_text, reply_markup=markup, parse_mode='Markdown')

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
@bot.callback_query_handler(func=lambda call: call.data in ['confirm_trade', 'cancel_trade'])
def handle_trade_confirmation(call):
    user_id = call.from_user.id
    
    if call.data == 'confirm_trade':
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–¥–µ–ª–∫–∏
        trade_unique_id = generate_trade_id()
        user_data[user_id]['trade_unique_id'] = trade_unique_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_trade_to_db(user_id, user_data[user_id])
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        trade_link = f"https://t.me/{bot.get_me().username}?start=join_{trade_unique_id}"
        
        trade_data = user_data[user_id]
        success_text = (
            "‚úÖ *–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
            f"üéÅ NFT: {trade_data['nft_url']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {trade_data['description']}\n"
            f"üí∞ –¶–µ–Ω–∞: {trade_data['price']} {trade_data['currency']}\n\n"
            f"üîó *–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:*\n`{trade_link}`\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —É—á–∞—Å—Ç–Ω–∏–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ!"
        )
        
        bot.edit_message_text(success_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown')
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in user_data:
            del user_data[user_id]
            
    else:  # cancel_trade
        bot.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", call.message.chat.id, call.message.message_id)
        if user_id in user_data:
            del user_data[user_id]

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_trade_to_db(user_id, trade_data):
    conn = sqlite3.connect('trades.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT INTO trades (trade_unique_id, user_id, user_username, nft_url, description, price, currency)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (trade_data['trade_unique_id'], user_id, 
          f"@{bot.get_chat(user_id).username}" if bot.get_chat(user_id).username else "–ë–µ–∑ username",
          trade_data['nft_url'], trade_data['description'], 
          trade_data['price'], trade_data['currency']))
    
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
@bot.message_handler(commands=['start'])
def handle_start_with_join(message):
    if len(message.text.split()) > 1:
        command = message.text.split()[1]
        if command.startswith('join_'):
            trade_unique_id = command.split('_')[1]
            join_trade(message, trade_unique_id)
        else:
            send_welcome(message)
    else:
        send_welcome(message)

# –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–¥–µ–ª–∫–µ
def join_trade(message, trade_unique_id):
    user_id = message.from_user.id
    username = f"@{message.from_user.username}" if message.from_user.username else "–ë–µ–∑ username"
    
    conn = sqlite3.connect('trades.db')
    cursor = conn.cursor()
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–¥–µ–ª–∫—É
    cursor.execute('SELECT * FROM trades WHERE trade_unique_id = ?', (trade_unique_id,))
    trade = cursor.fetchone()
    
    if not trade:
        bot.send_message(message.chat.id, "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞")
        conn.close()
        return
    
    trade_id, trade_unique_id, creator_id, creator_username, nft_url, description, price, currency, status, created_at = trade
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
    if user_id == creator_id:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ")
        conn.close()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ —É–∂–µ
    cursor.execute('SELECT * FROM trade_participants WHERE trade_id = ? AND user_id = ?', (trade_id, user_id))
    existing_participant = cursor.fetchone()
    
    if existing_participant:
        bot.send_message(message.chat.id, "‚ùå –í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ")
        conn.close()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    cursor.execute('''
        INSERT INTO trade_participants (trade_id, user_id, user_username)
        VALUES (?, ?, ?)
    ''', (trade_id, user_id, username))
    
    conn.commit()
    conn.close()
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–µ–≥–æ—Å—è
    bot.send_message(message.chat.id,
                    f"‚úÖ *–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–¥–µ–ª–∫–µ!*\n\n"
                    f"üéÅ NFT: {nft_url}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                    f"üí∞ –¶–µ–Ω–∞: {price} {currency}\n\n"
                    f"üë§ *–°–æ–∑–¥–∞—Ç–µ–ª—å —Å–¥–µ–ª–∫–∏:* {creator_username}\n\n"
                    "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–¥–µ–ª–∫–∏!")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–¥–µ–ª–∫–∏
    bot.send_message(creator_id,
                    f"üéâ *–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–π —Å–¥–µ–ª–∫–µ!*\n\n"
                    f"üë§ *–£—á–∞—Å—Ç–Ω–∏–∫:* {username}\n"
                    f"üÜî ID: `{user_id}`\n\n"
                    f"üéÅ *–î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏:*\n"
                    f"‚Ä¢ NFT: {nft_url}\n"
                    f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                    f"‚Ä¢ –¶–µ–Ω–∞: {price} {currency}\n\n"
                    "‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫:*",
                    parse_mode='Markdown')
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞', callback_data=f'confirm_participant_{trade_id}_{user_id}'),
        types.InlineKeyboardButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'reject_participant_{trade_id}_{user_id}')
    )
    
    bot.send_message(creator_id, f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {username}?", reply_markup=markup)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Å–¥–µ–ª–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith(('confirm_participant_', 'reject_participant_')))
def handle_participant_confirmation(call):
    data_parts = call.data.split('_')
    action = data_parts[1]
    trade_id = int(data_parts[2])
    participant_id = int(data_parts[3])
    
    conn = sqlite3.connect('trades.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
    cursor.execute('SELECT user_username FROM trade_participants WHERE trade_id = ? AND user_id = ?', 
                   (trade_id, participant_id))
    participant = cursor.fetchone()
    
    if not participant:
        bot.answer_callback_query(call.id, "‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        conn.close()
        return
    
    participant_username = participant[0]
    
    if action == 'confirm':
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
        cursor.execute('UPDATE trade_participants SET status = ? WHERE trade_id = ? AND user_id = ?',
                      ('confirmed', trade_id, participant_id))
        
        conn.commit()
        conn.close()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
        bot.edit_message_text(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {participant_username} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!",
                            call.message.chat.id, call.message.message_id)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
        bot.send_message(participant_id,
                        f"üéâ *–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –≤ —Å–¥–µ–ª–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!*\n\n"
                        f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å —Å–¥–µ–ª–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—Å –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞.\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –æ–ø–ª–∞—Ç–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Å–¥–µ–ª–∫–∏!")
        
    else:  # reject
        # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        cursor.execute('DELETE FROM trade_participants WHERE trade_id = ? AND user_id = ?',
                      (trade_id, participant_id))
        
        conn.commit()
        conn.close()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
        bot.edit_message_text(f"‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ {participant_username} –æ—Ç–∫–ª–æ–Ω–µ–Ω",
                            call.message.chat.id, call.message.message_id)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
        bot.send_message(participant_id,
                        "‚ùå –°–æ–∑–¥–∞—Ç–µ–ª—å —Å–¥–µ–ª–∫–∏ –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ.\n"
                        "–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –æ—à–∏–±–∫–∞ –∏–ª–∏ —Å–¥–µ–ª–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")

# –ú–æ–∏ —Å–¥–µ–ª–∫–∏ (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)
@bot.message_handler(func=lambda message: message.text == 'üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏')
def my_trades(message):
    conn = sqlite3.connect('trades.db')
    cursor = conn.cursor()
    
    # –°–¥–µ–ª–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    cursor.execute('SELECT * FROM trades WHERE user_id = ? ORDER BY created_at DESC', (message.from_user.id,))
    created_trades = cursor.fetchall()
    
    # –°–¥–µ–ª–∫–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫
    cursor.execute('''
        SELECT t.* FROM trades t
        JOIN trade_participants tp ON t.id = tp.trade_id
        WHERE tp.user_id = ? ORDER BY tp.joined_at DESC
    ''', (message.from_user.id,))
    joined_trades = cursor.fetchall()
    
    conn.close()
    
    if not created_trades and not joined_trades:
        bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    if created_trades:
        bot.send_message(message.chat.id, "üè™ *–°–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏ —Å–¥–µ–ª–∫–∏:*", parse_mode='Markdown')
        
        for trade in created_trades:
            trade_id, trade_unique_id, user_id, username, nft_url, description, price, currency, status, created_at = trade
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            conn = sqlite3.connect('trades.db')
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM trade_participants WHERE trade_id = ?', (trade_id,))
            participants_count = cursor.fetchone()[0]
            conn.close()
            
            trade_link = f"https://t.me/{bot.get_me().username}?start=join_{trade_unique_id}"
            
            trade_text = (
                f"üéÅ *–°–¥–µ–ª–∫–∞ #{trade_id}*\n\n"
                f"üìé NFT: {nft_url}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"üí∞ –¶–µ–Ω–∞: {price} {currency}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üîó –°—Å—ã–ª–∫–∞: `{trade_link}`\n"
                f"üïê –°–æ–∑–¥–∞–Ω–∞: {created_at[:16]}"
            )
            
            bot.send_message(message.chat.id, trade_text, parse_mode='Markdown')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–¥–µ–ª–∫–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫
    if joined_trades:
        bot.send_message(message.chat.id, "ü§ù *–°–¥–µ–ª–∫–∏ –≥–¥–µ –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫:*", parse_mode='Markdown')
        
        for trade in joined_trades:
            trade_id, trade_unique_id, creator_id, creator_username, nft_url, description, price, currency, status, created_at = trade
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
            conn = sqlite3.connect('trades.db')
            cursor = conn.cursor()
            cursor.execute('SELECT status FROM trade_participants WHERE trade_id = ? AND user_id = ?', 
                          (trade_id, message.from_user.id))
            participant_status = cursor.fetchone()[0]
            conn.close()
            
            trade_text = (
                f"üéÅ *–°–¥–µ–ª–∫–∞ #{trade_id}*\n\n"
                f"üìé NFT: {nft_url}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"üí∞ –¶–µ–Ω–∞: {price} {currency}\n"
                f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator_username}\n"
                f"‚úÖ –í–∞—à —Å—Ç–∞—Ç—É—Å: {participant_status}\n"
                f"üïê –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å: {created_at[:16]}"
            )
            
            bot.send_message(message.chat.id, trade_text, parse_mode='Markdown')

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@bot.message_handler(func=lambda message: message.text == 'üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' and message.from_user.id == ADMIN_ID)
def admin_panel(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='stats'),
        types.InlineKeyboardButton('üéÅ –í—Å–µ —Å–¥–µ–ª–∫–∏', callback_data='all_trades')
    )
bot.send_message(message.chat.id, 
                    "üõ†Ô∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
                    "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    "‚Ä¢ –°–¥–µ–ª–æ–∫: 1423\n"
                    "‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: 5.0/5 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n"
                    "üíé –ë–∞–ª–∞–Ω—Å: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π",
                    reply_markup=markup, parse_mode='Markdown')

@bot.message_handler(commands=['test'])
def send_test(message):
    bot.reply_to(message, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def start_bot():
    print("üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞...")
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        bot.remove_webhook()
        time.sleep(1)
        
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        bot.infinity_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        time.sleep(10)
        start_bot()

if __name__ == "__main__":
    print("ü§ñ NFT Trade Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    print(f"üíµ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: {list(CURRENCIES.values())}")
    print(f"üëë –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
    
    start_bot()




