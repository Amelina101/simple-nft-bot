import os
import sqlite3
import telebot
from telebot import types
import time
import random
import string

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = 6540509823  # –í–ê–® –†–ï–ê–õ–¨–ù–´–ô ID

bot = telebot.TeleBot(BOT_TOKEN)

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –¥–ª—è —Å–¥–µ–ª–æ–∫
def generate_trade_id():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS trades (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                trade_unique_id TEXT UNIQUE,
                seller_id INTEGER,
                seller_username TEXT,
                buyer_id INTEGER,
                buyer_username TEXT,
                nft_url TEXT,
                description TEXT,
                price REAL,
                currency TEXT,
                status TEXT DEFAULT 'waiting_buyer',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                balance_rub REAL DEFAULT 1000,
                balance_usd REAL DEFAULT 100,
                balance_byn REAL DEFAULT 500,
                balance_kzt REAL DEFAULT 50000,
                balance_uah REAL DEFAULT 4000,
                stars INTEGER DEFAULT 50,
                card_number TEXT,
                is_admin BOOLEAN DEFAULT FALSE
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id, username, is_admin)
            VALUES (?, 'admin', TRUE)
        ''', (ADMIN_ID,))
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_data = {}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã
CURRENCIES = {
    'stars': '‚≠ê –ó–≤–µ–∑–¥—ã',
    'rub': 'üá∑üá∫ RUB (–†—É–±–ª–∏)',
    'usd': 'üá∫üá∏ USD (–î–æ–ª–ª–∞—Ä—ã)',
    'byn': 'üáßüáæ BYN (–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–µ —Ä—É–±–ª–∏)',
    'kzt': 'üá∞üáø KZT (–¢–µ–Ω–≥–µ)',
    'uah': 'üá∫üá¶ UAH (–ì—Ä–∏–≤–Ω—ã)'
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if not init_db():
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    user_id = message.from_user.id
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', 
                       (user_id, f"@{message.from_user.username}" if message.from_user.username else "–ë–µ–∑ username"))
        conn.commit()
        conn.close()
    except:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if len(message.text.split()) > 1:
        command = message.text.split()[1]
        if command.startswith('join_'):
            trade_unique_id = command[5:]  # –£–±–∏—Ä–∞–µ–º 'join_'
            process_join_trade(message, trade_unique_id)
            return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if message.from_user.id == ADMIN_ID:
        markup.row('üéÅ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', 'üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏')
        markup.row('üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'üí≥ –ë–∞–ª–∞–Ω—Å')
    else:
        markup.row('üéÅ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', 'üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏')
        markup.row('üí≥ –ë–∞–ª–∞–Ω—Å')
    
    bot.send_message(message.chat.id, 
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NFT Trade Bot!",
                    reply_markup=markup)

# –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ
def process_join_trade(message, trade_unique_id):
    user_id = message.from_user.id
    username = f"@{message.from_user.username}" if message.from_user.username else "–ë–µ–∑ username"
    
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–¥–µ–ª–∫—É
        cursor.execute('SELECT * FROM trades WHERE trade_unique_id = ?', (trade_unique_id,))
        trade = cursor.fetchone()
        
        if not trade:
            bot.send_message(message.chat.id, "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞")
            conn.close()
            return
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        (trade_id, trade_unique_id_db, seller_id, seller_username, 
         buyer_id, buyer_username, nft_url, description, price, 
         currency, status, created_at) = trade
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
        if user_id == seller_id:
            bot.send_message(message.chat.id, 
                           "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ!\n\n"
                           "üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
            conn.close()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        if buyer_id is not None:
            bot.send_message(message.chat.id, "‚ùå –í —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ —É–∂–µ –µ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å")
            conn.close()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
        cursor.execute('''
            UPDATE trades 
            SET buyer_id = ?, buyer_username = ?, status = ? 
            WHERE id = ?
        ''', (user_id, username, 'waiting_payment', trade_id))
        
        conn.commit()
        conn.close()
        
        # –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –î–õ–Ø –ü–û–ö–£–ü–ê–¢–ï–õ–Ø
        buyer_message = (
            f"‚úÖ *–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–¥–µ–ª–∫–µ!*\n\n"
            f"üë§ **–ü—Ä–æ–¥–∞–≤–µ—Ü:** {seller_username}\n"
            f"üéÅ **NFT:** {nft_url}\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}\n"
            f"üí∞ **–¶–µ–Ω–∞:** {price} {CURRENCIES[currency]}\n\n"
            f"üí° *–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:*\n"
            f"1. –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ\n"
            f"2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton('üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', callback_data=f'start_payment_{trade_id}'))
        
        bot.send_message(user_id, buyer_message, reply_markup=markup, parse_mode='Markdown')
        
        # –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –î–õ–Ø –ü–†–û–î–ê–í–¶–ê
        seller_message = (
            f"üéâ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–π —Å–¥–µ–ª–∫–µ!*\n\n"
            f"üë§ **–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {username}\n"
            f"üí∞ **–°—É–º–º–∞:** {price} {CURRENCIES[currency]}\n\n"
            f"‚è≥ *–û–∂–∏–¥–∞–π—Ç–µ –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è...*\n"
            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–µ—Ä–µ–≤–æ–¥."
        )
        
        bot.send_message(seller_id, seller_message, parse_mode='Markdown')
        
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

# –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.text == 'üí≥ –ë–∞–ª–∞–Ω—Å')
def show_balance(message):
    user_id = message.from_user.id
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        conn.close()
        
        if user:
            user_id, username, rub, usd, byn, kzt, uah, stars, card, is_admin = user
            
            balance_text = (
                f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:*\n\n"
                f"‚≠ê –ó–≤–µ–∑–¥—ã: `{stars}`\n"
                f"üá∑üá∫ RUB: `{rub}`\n"
                f"üá∫üá∏ USD: `{usd}`\n"
                f"üáßüáæ BYN: `{byn}`\n"
                f"üá∞üáø KZT: `{kzt}`\n"
                f"üá∫üá¶ UAH: `{uah}`\n\n"
            )
            
            if card:
                balance_text += f"üí≥ –ü—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞: `{card}`\n\n"
            
            if is_admin:
                balance_text += "üëë *–°—Ç–∞—Ç—É—Å: –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†*\nüíé –ë–∞–ª–∞–Ω—Å: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
            else:
                balance_text += "üí° –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /deposit"
            
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton('üí≥ –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É', callback_data='bind_card'),
                types.InlineKeyboardButton('‚≠ê –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤–µ–∑–¥—ã', callback_data='add_stars')
            )
            
            bot.send_message(message.chat.id, balance_text, reply_markup=markup, parse_mode='Markdown')
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞")

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
@bot.message_handler(func=lambda message: message.text == 'üéÅ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É')
def start_create_trade(message):
    user_id = message.from_user.id
    user_data[user_id] = {'step': 'creating_trade'}
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton(CURRENCIES['stars'], callback_data='currency_stars'),
        types.InlineKeyboardButton(CURRENCIES['rub'], callback_data='currency_rub')
    )
    markup.row(
        types.InlineKeyboardButton(CURRENCIES['usd'], callback_data='currency_usd'),
        types.InlineKeyboardButton(CURRENCIES['byn'], callback_data='currency_byn')
    )
    markup.row(
        types.InlineKeyboardButton(CURRENCIES['kzt'], callback_data='currency_kzt'),
        types.InlineKeyboardButton(CURRENCIES['uah'], callback_data='currency_uah')
    )
    
    bot.send_message(message.chat.id,
                    "üéÅ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏*\n\n"
                    "üíµ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                    reply_markup=markup, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('currency_'))
def handle_currency_selection(call):
    user_id = call.from_user.id
    currency_code = call.data.split('_')[1]
    
    user_data[user_id]['currency'] = currency_code
    user_data[user_id]['currency_display'] = CURRENCIES[currency_code]
    
    bot.delete_message(call.message.chat.id, call.message.message_id)
    
    msg = bot.send_message(call.message.chat.id,
                         f"‚úÖ –í–∞–ª—é—Ç–∞: {CURRENCIES[currency_code]}\n\n"
                         "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ NFT –ø–æ–¥–∞—Ä–æ–∫:",
                         parse_mode='Markdown')
    
    bot.register_next_step_handler(msg, process_nft_url)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ NFT
def process_nft_url(message):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return
    
    user_data[user_id]['nft_url'] = message.text
    
    msg = bot.send_message(message.chat.id, "üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–¥–µ–ª–∫–∏:")
    bot.register_next_step_handler(msg, process_description)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
def process_description(message):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return
    
    user_data[user_id]['description'] = message.text
    
    currency_display = user_data[user_id]['currency_display']
    msg = bot.send_message(message.chat.id, f"üí∞ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ {currency_display} (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    bot.register_next_step_handler(msg, process_price)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
def process_price(message):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return
    
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        user_data[user_id]['price'] = price
        show_trade_preview(message.chat.id, user_id)
        
    except ValueError:
        msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã:")
        bot.register_next_step_handler(msg, process_price)

# –ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é —Å–¥–µ–ª–∫–∏
def show_trade_preview(chat_id, user_id):
    trade_data = user_data[user_id]
    
    preview_text = (
        "üéÅ *–ü—Ä–µ–≤—å—é —Å–¥–µ–ª–∫–∏:*\n\n"
        f"üìé NFT: {trade_data['nft_url']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {trade_data['description']}\n"
        f"üí∞ –¶–µ–Ω–∞: {trade_data['price']} {trade_data['currency_display']}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm_trade'),
        types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_trade')
    )
    
    bot.send_message(chat_id, preview_text, reply_markup=markup, parse_mode='Markdown')

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
@bot.callback_query_handler(func=lambda call: call.data in ['confirm_trade', 'cancel_trade'])
def handle_trade_confirmation(call):
    user_id = call.from_user.id
    
    if call.data == 'confirm_trade':
        trade_unique_id = generate_trade_id()
        user_data[user_id]['trade_unique_id'] = trade_unique_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É
        save_trade_to_db(user_id, user_data[user_id])
        
        # –°–û–ó–î–ê–ï–ú –°–°–´–õ–ö–£ –î–õ–Ø –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–Ø
        join_link = f"https://t.me/{bot.get_me().username}?start=join_{trade_unique_id}"
        
        success_text = (
            "‚úÖ *–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
            f"üéÅ **–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:**\n"
            f"`{join_link}`\n\n"
            f"üìé **NFT:** {user_data[user_id]['nft_url']}\n"
            f"üí∞ **–¶–µ–Ω–∞:** {user_data[user_id]['price']} {user_data[user_id]['currency_display']}\n\n"
            f"üí° *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é*\n"
            f"‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π —Å–¥–µ–ª–∫–µ*"
        )
        
        bot.edit_message_text(success_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown')
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in user_data:
            del user_data[user_id]
            
    else:
        bot.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", call.message.chat.id, call.message.message_id)
        if user_id in user_data:
            del user_data[user_id]

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –±–∞–∑—É
def save_trade_to_db(user_id, trade_data):
    try:
        conn = sqlite3.connect('trades.db', check_same_thread=False)
        cursor = conn.cursor()
        
        username = f"@{bot.get_chat(user_id).username}" if bot.get_chat(user_id).username else "–ë–µ–∑ username"
        
        cursor.execute('''
                       INSERT INTO trades (trade INSERT INTO trades (trade_unique_unique_id, seller_id_id, seller_id,, seller_username, n seller_username, nftft_url, description, price_url, description, price,, currency)
            VALUES (?, currency)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ?, ?)
        ''',)
        ''', (trade (trade_data['trade_unique_data['trade_unique_id'],_id'], user_id, username user_id, username,
             ,
              trade_data['n trade_data['nft_urlft_url'], trade_data['description'], 
              trade_data'], trade_data['description'], 
              trade_data['price['price'], trade_data[''], trade_data['currency']))
        
currency']))
        
        conn        conn.commit()
        conn.commit()
        conn.close()
.close()
        print(f"        print(f"‚úÖ –°‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:–µ–Ω–∞: {trade_data[' {trade_data['trade_uniquetrade_unique_id']}")
   _id']}")
    except Exception except Exception as e as e:
        print(f:
        print(f"‚ùå –û"‚ùå –û—à–∏–±–∫–∞—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {: {e}")

#e}")

# –ù–∞ –ù–∞—á–∞–ª–æ—á–∞–ª–æ –æ–ø–ª–∞—Ç—ã
@bot.callback_query –æ–ø–ª–∞—Ç—ã
@bot.callback_query_handler(func_handler(func=lambda call: call=lambda call: call.data.start.data.startswith('start_payment_'))
defswith('start_payment_'))
def handle_payment handle_payment_start(call):
    trade_start(call):
    trade_id = int(call_id = int(call.data.split('_')[2])
.data.split('_')[2])
    user_id = call.from_user    user_id = call.from_user.id
    
    try:
        conn = sqlite3.id
    
    try:
        conn = sqlite3.connect('t.connect('trades.dbrades.db',', check check_s_same_thread=False)
ame_thread=False)
        cursor = conn.cursor        cursor = conn.cursor()
        
        cursor.execute()
        
        cursor.execute('SELECT * FROM('SELECT * FROM trades WHERE trades WHERE id = ?', id = ?', (trade (trade_id,))
       _id,))
        trade = trade = cursor.fetchone()
 cursor.fetchone()
               cursor.execute('SELECT * FROM cursor.execute('SELECT * FROM users WHERE user_id = ? users WHERE user_id = ?', (user_id', (user_id,))
        user = cursor,))
        user = cursor.fetchone()
        
        if not trade.fetchone()
        
        if not trade or not user:
            bot or not user:
            bot.answer_callback.answer_callback_query_query(call.id, "(call.id, "‚ùå‚ùå –û—à–∏–±–∫–∞")
 –û—à–∏–±–∫–∞")
            conn            conn.close()
            return
        
.close()
            return
        
               (trade_id, (trade_id, trade_unique trade_unique_id, seller_id, seller_id, seller_id, seller_username, 
_username, 
         buyer_id, buyer_username         buyer_id, buyer_username,, nft_url, description, nft_url, description, price, 
         price, 
         currency, status, created_at currency, status, created_at) = trade) = trade
        

        
        user_id        user_id_db, username, rub, us_db, username, rub, usd, byn, kd, byn, kzt, uah, starszt, uah, stars, card, is_admin =, card, is_admin = user
        
        if user_id user
        
        if user_id != buyer_id != buyer_id:
           :
            bot.answer_callback_query(c bot.answer_callback_query(call.idall.id, "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫, "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π —Å–¥–µ —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏")
            conn–ª–∫–∏")
            conn.close()
            return
        
        conn.close.close()
            return
        
        conn.close()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–∫—Ä–æ–º–µ –∞–¥–º–∏()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)
       –Ω–∞)
        if if not is_admin:
            if not is_admin:
            if currency == 'stars' and stars currency == 'stars' and stars < price:
                bot.send_message < price:
                bot.send_message(user(user_id, f"_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω–¥. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ—Å–µ: {stars}‚≠ê: {stars}‚≠ê")
")
                return
            elif                return
            elif currency currency == 'rub' and == 'rub' and rub rub < price:
 < price:
                               bot.send_message(user_id, f"‚ùå –ù–µ bot.send_message(user_id, f"‚ùå –ù–µ–¥–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É–±–ª–µ–π. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É–±–ª–µ–π. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ:: {rub}‚ÇΩ")
                return
            elif {rub}‚ÇΩ")
                return
            elif currency currency == 'usd' and usd == 'usd' and usd < price:
                bot < price:
                bot.send_message.send_message(user_id, f"(user_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–ª–∞—Ä–æ–≤. –ù–∞ –≤–∞–ª–∞—Ä–æ–≤. –ù–∞ –≤–∞—à–µ–º—à–µ–º –±–∞–ª–∞–Ω—Å–µ: { –±–∞–ª–∞–Ω—Å–µ: {usdusd}$")
                return}$")
                return

            elif currency == '            elif currency == 'bbyn' and byyn' and bynn < price:
                bot < price:
                bot.send_message.send_message(user_id, f(user_id, f""‚ùå –ù–µ–¥–æ—Å—Ç–∞‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BY—Ç–æ—á–Ω–æ BYN. –ù–∞ –≤–∞N. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—à–µ–º –±–∞–ª–∞–Ω—Å–µ: {b—Å–µ: {byn}yn} BYN")
                BYN")
                return
            elif currency return
            elif currency == 'kzt' and k == 'kzt' and kzt < price:
                botzt < price:
                bot.send_message(user_id.send_message(user_id,, f"‚ùå f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–Ω–≥–µ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–Ω–≥–µ.. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ:—Å–µ: {kzt} {kzt}‚Ç∏‚Ç∏")
                return
")
                return
                       elif currency == 'u elif currency == 'uahah' and uah' and uah < < price:
 price:
                bot.send                bot.send_message(user_id, f"_message(user_id, f"‚ùå‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä–∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä–∏–≤–µ–Ω. –ù–∞ –≤–∞–≤–µ–Ω. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ—à–µ–º –±–∞–ª–∞–Ω—Å–µ: {uah}: {uah}‚Ç¥")
                return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
        payment_text‚Ç¥")
                return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
        payment_text = (
            f"üí≥ = (
            f"üí≥ *–û–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ *–û–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏*\n\n"
            f"üí∞*\n\n"
            f –°—É–º–º–∞: {price"üí∞ –°—É–º–º–∞: {price} {CURRENCI} {CURRENCIES[currency]}\nES[currency]}\n"
            f"üë§"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_username}\n\n"
        )
        
username}\n\n"
        )
        
               markup = types.Inline markup = types.InlineKeyboardMarkKeyboardMarkup()
        
up()
        
               if currency == 'stars':
            payment_text += " if currency == 'stars':
            payment_text += "‚≠ê *‚≠ê *–û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏–û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏:*\:*\n–£–±–µ–¥–∏—Ç–µn–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ—Å—å —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –Ω–∞–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"
            –±–∞–ª–∞–Ω—Å–µ"
            markup.row markup.row(types.InlineKeyboardButton('‚≠ê(types.InlineKeyboardButton('‚≠ê –Ø –æ–ø–ª–∞—Ç–∏ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞) –∑–≤–µ–∑–¥–∞–º–∏',–ª(–∞) –∑–≤–µ–∑–¥–∞–º–∏', callback_data=f callback_data=f'confirm_payment_{trade_id}'))
'confirm_payment_{trade_id}'))
        else:
                   else:
            payment_text += f" payment_text += f"üí≥üí≥ *–û–ø–ª–∞—Ç–∞ { *–û–ø–ª–∞—Ç–∞ {CCURRENCIESURRENCIES[[currency]}:*\n–£currency]}:*\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–∞—Ä—Ç–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–∞—Ä—Ç–∞ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
            markup –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
            markup.row(types.Inline.row(types.InlineKeyboardButton('üí≥ –ØKeyboardButton('üí≥ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞) –æ–ø–ª–∞—Ç–∏–ª(–∞) –∫–∞—Ä—Ç–æ–π', callback_data=f –∫–∞—Ä—Ç–æ–π', callback_data=f'confirm_payment_{trade'confirm_payment_{trade_id}'))
        
        bot_id}'))
        
        bot.edit_message_text(payment_text.edit_message_text(payment_text,, call.message.chat call.message.chat.id.id, call.message.message_id, call.message.message_id,, 
                             reply 
                             reply_markup=markup, parse_markup=markup, parse_mode='Markdown')
        
_mode='Markdown')
        
    except Exception as e:
    except Exception as e:
        bot.answer_callback        bot.answer_callback_query(c_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞all.id, "‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã")

# –ú–æ–∏ —Å–¥–µ—Ç—ã")

# –ú–æ–∏ —Å–¥–µ–ª–∫–∏
@bot.message_handler–ª–∫–∏
@bot.message_handler(func=lambda message: message.text == 'üíº –ú–æ–∏(func=lambda message: message.text == 'üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏')
def my_trades(message —Å–¥–µ–ª–∫–∏')
def my_trades(message):
    user_id = message.from_user):
    user_id = message.from_user.id
.id
    try:
           try:
        conn = conn = sqlite3 sqlite3.connect('trades.connect('trades.db',.db', check_same check_same_thread=False_thread=False)
        cursor =)
        cursor = conn.cursor conn.cursor()
        
        #()
        
        # –°–¥–µ –°–¥–µ–ª–∫–∏ –≥–¥–µ–ª–∫–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–≤–µ—Ü
        cursor—Ü
        cursor.execute.execute('SELECT * FROM trades WHERE('SELECT * FROM trades WHERE seller_id = seller_id = ? ORDER BY created_at DESC', ? ORDER BY created_at DESC', (user_id (user_id,))
        seller,))
        seller_trades = cursor_trades = cursor.fetchall()
        
.fetchall()
        
        # –°–¥–µ        # –°–¥–µ–ª–∫–∏ –≥–¥–µ–ª–∫–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
       
        cursor.execute('SELECT cursor.execute('SELECT * FROM * FROM trades WHERE buyer_id trades WHERE buyer_id = ? = ? ORDER BY created_at ORDER BY created_at DESC', DESC', (user_id, (user_id,))
       ))
        buyer_trades = buyer_trades = cursor.fetch cursor.fetchall()
        
        connall()
        
        conn.close()
.close()
        
        if not seller_trades and        
        if not seller_trades and not buyer not buyer_trades:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å_trades:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫")
            return —Å–¥–µ–ª–æ–∫")
            return
        

        
        if seller        if seller_trades:
_trades:
            bot.send_message            bot.send_message(message(message.chat.id, ".chat.id, "üè™üè™ *–°–¥–µ–ª–∫–∏ *–°–¥–µ–ª–∫–∏ –≥–¥–µ –≤—ã –≥–¥–µ –≤—ã –ø—Ä–æ–¥–∞–≤–µ—Ü:* –ø—Ä–æ–¥–∞–≤–µ—Ü:*", parse_mode='Markdown", parse_mode='Markdown')
            for trade in seller_trades')
            for trade in seller:
                show_t_trades:
                show_trade_info(message.chat.idrade_info(message.chat.id,, trade, 'seller')
 trade, 'seller')
        
        
        if buyer        if buyer_trades:
            bot.send_message(message_trades:
            bot.send_message(message.chat.id,.chat.id, "üõí "üõí *–°–¥–µ–ª–∫–∏ *–°–¥–µ–ª–∫–∏ –≥–¥–µ –≤—ã –≥–¥–µ –≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å:*", parse_mode='Markdown')
           :*", parse_mode='Markdown')
            for trade for trade in buyer_trades in buyer_trades:
                show_trade_info(message.ch:
                show_trade_info(message.chat.id, trade, 'buyer')
                
    except Exception as e:
        bot.send_message(message.chatat.id, trade, 'buyer')
                
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå.id, " –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫")

def show_trade–ª–æ–∫")

def show_trade_info(_info(chat_id, tradechat_id, trade, role, role):
    try:
        (trade_id,):
    try:
        (trade_id, trade_unique_id trade_unique_id, seller_id,, seller_id, seller_ seller_username, 
        username, 
         buyer buyer_id,_id, buyer buyer_username_username, nft_url, description, price,, nft_url, description, price, 
         
         currency, status, created_at) currency, status, created_at) = trade = trade
        
        status_
        
        status_emoemoji = {
ji            'waiting_buyer': '‚è≥',
 = {
            'waiting_buyer':            'waiting_payment': '‚è≥',
            'waiting_payment': 'üí≥',
            'completed': 'üí≥',
            'completed': '‚úÖ',
            '‚úÖ',
            'c 'cancelled': 'ancelled': '‚ùå‚ùå'
        }
        
'
        }
        
        text        text = (
            f = (
            f""üéÅ *–°–¥–µüéÅ *–°–¥–µ–ª–∫–∞ #{–ª–∫–∞ #{trade_id}*\trade_id}*\n"
n"
            f"üí∞            f"üí∞ {price {price} {} {CURRENCIES[CURRENCIES[currency]}\n"
            f"üìäcurrency]}\n"
            f"üìä –°—Ç–∞—Ç—É –°—Ç–∞—Ç—É—Å: {status_—Å: {status_emoji.getemoji.get(status,(status, '‚ö°') '‚ö°')} {status} {status}\n"
}\n"
            f"            f"üïêüïê {created_at[: {created_at[:1616]}"
       ]}"
        )
        
        if )
        
        if role == role == 'seller' and 'seller' and buyer_username buyer_username:
            text:
            text += += f"\nüë§ f"\nüë§ –ü–æ–∫—É –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buy–ø–∞—Ç–µ–ª—å: {buyerer_username}"
_username}"
        elif role ==        elif role == 'buyer':
            text 'buyer':
            text += f"\nüë§ –ü—Ä += f"\nüë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_–æ–¥–∞–≤–µ—Ü: {seller_username}"
        
        #username}"
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–∞ –ø—Ä–æ–¥–∞–≤–µ—Ü –∏–≤–µ—Ü –∏ —Å–¥–µ–ª–∫–∞ –æ–∂–∏–¥–∞–µ—Ç —Å–¥–µ–ª–∫–∞ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É —Å—Å—ã–ª–∫—É
        if role == 'seller' and
        if role == 'seller' and status == 'waiting_buyer':
            join_link = f"https://t.me/{bot.get_me(). status == 'waiting_buyer':
            join_link = f"https://t.me/{bot.get_me().usernameusername}?start=join}?start=join_{_{trade_unique_id}"
           trade_unique_id}"
            text text += f"\n += f"\nüîóüîó –°—Å—ã–ª–∫–∞: ` –°—Å—ã–ª–∫–∞: `{{joinjoin_link_link}`"
        
        bot.send}`"
        
        bot.send_message_message(chat_id, text, parse_mode='Mark(chat_id, text, parse_mode='Markdowndown')
    except Exception as e:
')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–¥–µ–ª–∫–∏: {–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–¥–µ–ª–∫–∏: {e}")

# –ê–¥e}")

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@–º–∏–Ω –ø–∞–Ω–µ–ª—å
@bot.message_handler(func=lambda messagebot.message_handler(func=lambda message: message.text ==: message.text == ' 'üõ†Ô∏è –êüõ†Ô∏è –ê–¥–º–∏–Ω–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' –ø–∞–Ω–µ–ª—å' and message and message.from_user.id ==.from_user.id == ADMIN_ID ADMIN_ID)
def admin_p)
def admin_panel(messageanel(message):
    markup =):
    markup = types.In types.InlineKeyboardMarkuplineKeyboardMarkup()
   ()
    markup.row(
        markup.row(
        types.In types.InlineKeyboardButtonlineKeyboardButton('üìä('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='admin_stats–∫–∞', callback_data='admin_stats'),
        types.InlineKeyboardButton(''),
        types.InlineKeyboardButton('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data='adminüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data='admin_users')
_users')
    )
    
    bot    )
    
    bot.send_message(message.chat.id.send_message(message.chat.id,, 
                    " 
                    "üõ†üõ†Ô∏è *–ü–∞–Ω–µ–ª—åÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
—Ç–æ—Ä–∞*\n\n"
                                       "üëë –°—Ç–∞—Ç—É "üëë –°—Ç–∞—Ç—É—Å: –ê–î–ú–ò–ù–ò—Å: –ê–î–ú–ò–ù–ò–°–¢–†–ê–°–¢–†–ê–¢–û–†\n"
–¢–û–†\n"
                    "                    "üíé –ë–∞–ª–∞–Ωüíé –ë–∞–ª–∞–Ω—Å:—Å: –ë–µ–∑–ª–∏–º–∏ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π—Ç–Ω—ã–π\n"
                    "\n"
                    "‚ö° –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏:‚ö° –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏: –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    reply_m –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    reply_markuparkup=markup,=markup, parse_mode='Mark parse_mode='Markdown')

@bot.message_handler(commands=['testdown')

@bot.message_handler(commands'])
def send_test=['test'])
def send_test(message):
    bot(message):
    bot.reply_to(message.reply_to(message, "‚úÖ –ë, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# –ó–∞!")

# –ó–∞–ø—É—Å–∫–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main –±–æ—Ç–∞
if __name__ == "__main__":
   __":
    print("ü§ñ –ó–∞–ø—É—Å–∫ NFT Trade print("ü§ñ –ó–∞–ø—É—Å–∫ NFT Trade Bot...")
    print(f Bot...")
    print(f"üëë –ê–¥–º–∏–Ω"üëë –ê–¥–º–∏–Ω ID: { ID: {ADMIN_IDADMIN_ID}")
    
}")
    
    # –ò–Ω–∏    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    if init–µ–º –ë–î
    if init_db():
_db():
        print("‚úÖ        print("‚úÖ –ë–æ—Ç –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        
 –∑–∞–ø—É—â–µ–Ω!")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try:
            bot.remove:
            bot.remove_web_webhook()
            time.sleephook()
            time.sleep(1)
        except:
           (1)
        except:
            pass
        
        try:
 pass
        
        try:
                       bot.infinity_p bot.infinity_pollingolling()
        except Exception()
        except Exception as e as e:
           :
            print print(f"‚ùå(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    else –û—à–∏–±–∫–∞: {e}")
    else:
        print:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –±–æ—Ç–∞")


